# -*- coding: utf-8 -*-
"""CONCILIACIONES_PDFs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YmJcKcbbCMeUKoiIMsRVaVRFKgpehJ1V
"""

!pip install pdfplumber openpyxl

import pdfplumber
import re
import pandas as pd
from google.colab import files

#Subida de archivos pdf
uploaded = files.upload()
pdfs = [f for f in uploaded if f.endswith(".pdf")]

# ======= SECCION 1 =========

# Extraer encabezado general
def extraer_encabezado(texto):
    empresa = re.search(r'NOMBRE\s+EMPRESA\s*:\s*(.+)', texto)
    nit = re.search(r'NIT\s*(\d+)', texto)
    poliza = re.search(r'NUMERO\s+DE\s+POLIZA\s*(\d+)', texto)
    periodo = re.search(r'PERIODO\s+DE\s+COTIZACION\s*(\d+)', texto)
    return {
        'empresa': empresa.group(1).strip() if empresa else "",
        'nit': nit.group(1) if nit else "",
        'poliza': poliza.group(1) if poliza else "",
        'periodo': periodo.group(1) if periodo else ""
    }

# Verifica si una página tiene sección 1
def pagina_con_seccion_1(pagina):
    texto = pagina.extract_text()
    return bool(re.search(r'1\.\s*TRABAJADORES\s+AFILIADOS.*NO\s+PRESENTAN\s+PAGO', texto or "", re.IGNORECASE))

# Regex que separa los campos correctamente
patron_trabajador1 = re.compile(
    r'^(?P<tipo_id>CC|TI|CE|NIT|PT|PE|C)\s+'
    r'(?P<numero_id>\d+)\s+'
    r'(?P<cotizante_nombre>\d+\s-\s(?:[A-ZÁÉÍÓÚÑ]+\s?){2,10})\s+'
    r'(?P<estado>ING|RET|NO\s*SE\s*ENC(?:O|ON|ONT|ONTR|ONTRA|ONTRÓ)?|\bNO\b|No\s*se\s*enco)\s+'
    r'(?P<fecha_inicio>\d{2}/\d{2}/\d{4})'
    r'(?:\s+(?P<fecha_fin>\d{2}/\d{2}/\d{4}))?'
    r'\s+(?P<centro_trabajo>\d+\s-\s.+?)'
    r'\s+(?P<tasa>\d+,\d+%|\d+\.\d+%)'
    r'\s+(?P<periodo>\d{6})'
    r'\s+(?P<diferencias>[\d.,]+)$',
    re.IGNORECASE
)

# Lista donde se guarda la info
datos_trabajadores = []

for pdf_file in pdfs:
    with pdfplumber.open(pdf_file) as pdf:
        texto_completo = "\n".join([p.extract_text() or "" for p in pdf.pages])
        encabezado = extraer_encabezado(texto_completo)

        for pagina in pdf.pages:
            if pagina_con_seccion_1(pagina):
                texto = pagina.extract_text()
                for linea in texto.split("\n"):
                    linea_original = linea.strip()
                    linea = linea_original

                    # Normalización del estado "NO SE ENC"
                    linea = re.sub(r'\bNo\s*se\s*enco\b', 'NO SE ENC', linea, re.IGNORECASE) #Más específico

                    # Manejo de nombres faltantes
                    if re.search(r'\b(CC|TI|CE|NIT|PT|PE|C)\s+\d+\s+\d+\s-\s\w+\s+(ING|RET|NO\s*SE\s*ENC|\bNO\b)', linea, re.IGNORECASE):
                        linea = re.sub(
                            r'(\b\d+\s+-\s+\w+)\s+(ING|RET|NO\s*SE\s*ENC|\bNO\b)',
                            r'\1 __SIN_NOMBRE__ \2',
                            linea,
                            re.IGNORECASE
                        )

                    match = patron_trabajador1.search(linea)
                    if match:
                        grupo = match.groupdict()
                        datos_trabajadores.append({
                            'Archivo': pdf_file,
                            'Empresa': encabezado['empresa'],
                            'NIT': encabezado['nit'],
                            'Póliza': encabezado['poliza'],
                            'Período': encabezado['periodo'],
                            'Tipo ID': grupo.get("tipo_id", ""),
                            'Número ID': grupo.get("numero_id", ""),
                            'Cotizante y Nombre': grupo.get("cotizante_nombre", "").replace("__SIN_NOMBRE__", "").strip(),
                            'Estado de tr': grupo.get("estado", ""),
                            'Fecha Inicio Cobertura': grupo.get("fecha_inicio", ""),
                            'Fecha Fin Cobertura': grupo.get("fecha_fin", ""),  # opcional
                            'Centro Trabajo': grupo.get("centro_trabajo", ""),
                            'Tasa de Cotizacion': grupo.get("tasa", ""),
                            'Período de Mora': grupo.get("periodo", ""),
                            'Diferencias Pendientes': grupo.get("diferencias", "")
                        })

#SECCION 2

# ===== FUNCIONES COMPARTIDAS =====
def extraer_encabezado(texto):
    empresa = re.search(r'NOMBRE\s+EMPRESA\s*:\s*(.+)', texto)
    nit = re.search(r'NIT\s*(\d+)', texto)
    poliza = re.search(r'NUMERO\s+DE\s+POLIZA\s*(\d+)', texto)
    periodo = re.search(r'PERIODO\s+DE\s+COTIZACION\s*(\d+)', texto)
    return {
        'empresa': empresa.group(1).strip() if empresa else "",
        'nit': nit.group(1) if nit else "",
        'poliza': poliza.group(1) if poliza else "",
        'periodo': periodo.group(1) if periodo else ""
    }

def pagina_con_seccion_2(pagina):
    texto = pagina.extract_text()
    return bool(re.search(r'2\.\s*TRABAJADORES.*NO\s+SE\s+ENCUENTRAN.*AFILIADOS.*ARL.*PRESENTAN\s+PAGO', texto or "", re.IGNORECASE))

# ===== PATRÓN SECCIÓN 2 =====
patron_trabajador2 = re.compile(
    r'^(?P<tipo_id>CC|TI|CE|NIT|PT|PE|C)\s+'
    r'(?P<numero_id>\d+)\s+'
    r'(?P<cotizante_nombre>\d+\s-\s.+?)\s+'
    r'(?P<tasa>\d+,\d+%|\d+\.\d+%)\s+'
    r'(?P<aporte>[\d\.,]+)$',
    re.IGNORECASE
)

# ===== PROCESAMIENTO (Igual que Sección 1) =====
datos_trabajadores2 = []

for pdf_file in pdfs:
    with pdfplumber.open(pdf_file) as pdf:
        texto_completo = "\n".join([p.extract_text() or "" for p in pdf.pages])
        encabezado = extraer_encabezado(texto_completo)

        for pagina in pdf.pages:
            if pagina_con_seccion_2(pagina):
                texto = pagina.extract_text()
                for linea in texto.split("\n"):
                    linea = linea.strip()

                    # Saltar líneas que no contienen datos (encabezados o vacías)
                    if not linea or re.search(r'TIPO\s*DOCUMENTO|NUMERO\s*IDENTIFICACION', linea, re.IGNORECASE):
                        continue

                    # Normalización básica (sin pipes, espacios múltiples)
                    linea = re.sub(r'[\|]', ' ', linea)  # Eliminar pipes si existen
                    linea = re.sub(r'\s{2,}', ' ', linea)  # Unificar espacios

                    match = patron_trabajador2.search(linea)
                    if match:
                        grupo = match.groupdict()
                        datos_trabajadores2.append({
                            'Archivo': pdf_file,
                            'Empresa': encabezado['empresa'],
                            'NIT': encabezado['nit'],
                            'Póliza': encabezado['poliza'],
                            'Período': encabezado['periodo'],
                            'Tipo Documento': grupo["tipo_id"],
                            'Número Identificación': grupo["numero_id"],
                            'Cotizante y Nombre': grupo.get("cotizante_nombre", "").replace("__SIN_NOMBRE__", "").strip(),
                            'Tasa de Cotización': grupo["tasa"],
                            'Valor Aporte': grupo["aporte"].replace('.', '').replace(',', '.')  # Formato numérico
                        })

# ====== SECCION 3 =======

def extraer_encabezado(texto):
    empresa = re.search(r'NOMBRE\s+EMPRESA\s*:\s*(.+)', texto)
    nit = re.search(r'NIT\s*(\d+)', texto)
    poliza = re.search(r'NUMERO\s+DE\s+POLIZA\s*(\d+)', texto)
    periodo = re.search(r'PERIODO\s+DE\s+COTIZACION\s*(\d+)', texto)
    return {
        'empresa': empresa.group(1).strip() if empresa else "",
        'nit': nit.group(1) if nit else "",
        'poliza': poliza.group(1) if poliza else "",
        'periodo': periodo.group(1) if periodo else ""
    }

def es_inicio_seccion_3(linea):
    return bool(re.search(r'3\.\s*TRABAJADORES\s+QUE\s+PRESENTAN\s+DIFERENCIAS\s+EN\s+EL\s+PAGO', linea, re.IGNORECASE))

def es_fin_seccion_3(linea):
    return bool(re.search(r'PARA\s+TENER\s+EN\s+CUENTA:\s*Se refiere a los trabajadores que en su pago presentan una tasa', linea, re.IGNORECASE)) or \
           bool(re.search(r'4\.\s*OTRAS\s+DIFERENCIAS', linea, re.IGNORECASE))



# Regex adaptado para capturar los datos de Sección 3
patron_trabajador3 = re.compile(
    r'^(?P<tipo_id>CC|TI|CE|NIT|PT|PE|C)\s+'
    r'(?P<numero_id>\d+)\s+'
    r'(?P<cotizante_nombre>\d+\s-\s.+?)\s+'
    r'(?P<estado>ING|RET|NO\s*SE\s*ENC(?:O|ON|ONT|ONTR|ONTRA|ONTRÓ)?|NO)\s*'
    r'(?P<fecha_inicio>\d{2}/\d{2}/\d{4})'
    r'(?:\s+(?P<fecha_fin>\d{2}/\d{2}/\d{4}))?'
    r'\s+(?P<centro_trabajo>\d+\s-\s.+?)\s+'
    r'(?P<tasa_bd>\d+[.,]\d+%)\s+'
    r'(?P<tasa_pagada>\d+[.,]\d+%)\s+'
    r'(?P<periodo>\d{6})\s+'
    r'(?P<valor_pagado>[\d.,]+)\s+'
    r'(?P<diferencias>[\d.,]+)$',
    re.IGNORECASE
)


# Lista para guardar datos
datos_trabajadores3 = []

# Procesar archivos
for pdf_file in pdfs:
    with pdfplumber.open(pdf_file) as pdf:
        texto_completo = "\n".join([p.extract_text() or "" for p in pdf.pages])
        encabezado = extraer_encabezado(texto_completo)

        dentro_seccion_3 = False

        for pagina in pdf.pages:
            texto = pagina.extract_text() or ""
            for linea in texto.split("\n"):
                linea = linea.strip()

                if not linea:
                    continue

                # Detectar inicio de sección 3
                if not dentro_seccion_3 and es_inicio_seccion_3(linea):
                    dentro_seccion_3 = True
                    continue

                # Detectar fin de sección 3
                if dentro_seccion_3 and es_fin_seccion_3(linea):
                    dentro_seccion_3 = False
                    break  # Termina de leer esta página

                # Procesar líneas solo si estamos dentro de sección 3
                if dentro_seccion_3:
                    # Saltar encabezados de tablas
                    if re.search(r'TIPO\s*DOCUMENTO|NUMERO\s*IDENTIFICACION|TPO\s*DE\s*COTIZANTE', linea, re.IGNORECASE):
                        continue

                    # Limpiar línea
                    linea = re.sub(r'\bNo\s*se\s*enco\b', 'NO SE ENC', linea, re.IGNORECASE)
                    linea = re.sub(r'\s{2,}', ' ', linea)

                    match = patron_trabajador3.search(linea)
                    if match:
                        grupo = match.groupdict()
                        datos_trabajadores3.append({
                            'Archivo': pdf_file,
                            'Empresa': encabezado['empresa'],
                            'NIT': encabezado['nit'],
                            'Póliza': encabezado['poliza'],
                            'Período': encabezado['periodo'],
                            'Tipo Documento': grupo["tipo_id"],
                            'Número Identificación': grupo["numero_id"],
                            'Cotizante y Nombre': grupo.get("cotizante_nombre", "").replace("__SIN_NOMBRE__", "").strip(),
                            'Estado de tr': grupo["estado"],
                            'Fecha Inicio Cobertura': grupo["fecha_inicio"],
                            'Fecha Fin Cobertura': grupo.get("fecha_fin", ""),
                            'Centro Trabajo': grupo["centro_trabajo"],
                            'Tasa BD': grupo["tasa_bd"],
                            'Tasa Pagada': grupo["tasa_pagada"],
                            'Período Mora': grupo["periodo"],
                            'Valor Pagado': grupo["valor_pagado"].replace('.', '').replace(',', '.'),
                            'Diferencias Pendientes': grupo["diferencias"].replace('.', '').replace(',', '.')
                        })

# ====== SECCION 4 =======

def pagina_con_seccion_4_1(pagina):
    texto = pagina.extract_text()
    return bool(re.search(r'4\.1\s*NOVEDAD\s*DE\s*INGRESO\s*Y\s*RETIRO', texto or "", re.IGNORECASE))

# ===== Verifica si una página tiene sección 4.2 =====
def pagina_con_seccion_4_2(pagina):
    texto = pagina.extract_text()
    return bool(re.search(r'4\.2\s*DIAS\s*COTIZADOS\s*REPORTADOS', texto or "", re.IGNORECASE))


patron_trabajador4_1 = re.compile(
    r'^(?P<tipo_id>CC|TI|CE|NIT|PT|PE|C)\s+'
    r'(?P<numero_id>\d+)\s+'
    r'(?P<cotizante_nombre>\d+\s-\s.+?)\s{2,}'
    r'(?P<fecha_inicio>\d{2}/\d{2}/\d{4})\s+'
    r'(?P<centro_trabajo>\d+\s-\s.+?)\s+'
    r'(?P<tasa>\d+[.,]\d+%)$',
    re.IGNORECASE
)

patron_trabajador4_2 = re.compile(
    r'^(?P<tipo_id>CC|TI|CE|NIT|PT|PE|C)\s+'
    r'(?P<numero_id>\d+)\s+'
    r'(?P<cotizante_nombre>\d+\s-\s.+?)\s+'
    r'(?P<fecha_inicio>\d{2}/\d{2}/\d{4})\s+'
    r'(?P<centro_trabajo>\d+\s-\s.+?)\s+'
    r'(?P<tasa>\d+[.,]\d+%)$',
    re.IGNORECASE
)

# Inicializar listas
datos_trabajadores4_1 = []
datos_trabajadores4_2 = []

for pdf_file in pdfs:
    with pdfplumber.open(pdf_file) as pdf:
        texto_completo = "\n".join([p.extract_text() or "" for p in pdf.pages])
        encabezado = extraer_encabezado(texto_completo)

        for pagina in pdf.pages:
            texto = pagina.extract_text()
            if not texto:
                continue

            if pagina_con_seccion_4_1(pagina):
                for linea in texto.split("\n"):
                    linea = linea.strip()
                    match = patron_trabajador4_1.search(linea)
                    if match:
                        grupo = match.groupdict()
                        datos_trabajadores4_1.append({
                            'Archivo': pdf_file,
                            'Empresa': encabezado['empresa'],
                            'NIT': encabezado['nit'],
                            'Póliza': encabezado['poliza'],
                            'Período': encabezado['periodo'],
                            'Tipo ID': grupo.get("tipo_id", ""),
                            'Número ID': grupo.get("numero_id", ""),
                            'Cotizante y Nombre': grupo.get("cotizante_nombre", "").replace("__SIN_NOMBRE__", "").strip(),
                            'Fecha Inicio Cobertura': grupo.get("fecha_inicio", ""),
                            'Centro Trabajo': grupo.get("centro_trabajo", ""),
                            'Tasa de Cotizacion': grupo.get("tasa", "")
                        })

            if pagina_con_seccion_4_2(pagina):
                for linea in texto.split("\n"):
                    linea = linea.strip()
                    match = patron_trabajador4_2.search(linea)
                    if match:
                        grupo = match.groupdict()
                        datos_trabajadores4_2.append({
                            'Archivo': pdf_file,
                            'Empresa': encabezado['empresa'],
                            'NIT': encabezado['nit'],
                            'Póliza': encabezado['poliza'],
                            'Período': encabezado['periodo'],
                            'Tipo ID': grupo.get("tipo_id", ""),
                            'Número ID': grupo.get("numero_id", ""),
                            'Cotizante y Nombre': grupo.get("cotizante_nombre", "").replace("__SIN_NOMBRE__", "").strip(),
                            'Fecha Inicio Cobertura': grupo.get("fecha_inicio", ""),
                            'Centro Trabajo': grupo.get("centro_trabajo", ""),
                            'Tasa de Cotizacion': grupo.get("tasa", "")
                        })

#DESCARGAR TXT

import csv

# Función para guardar datos en un archivo TXT separado por ;
def guardar_txt(datos, nombre_archivo, columnas):
    with open(nombre_archivo, 'w', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=columnas, delimiter=';')
        writer.writeheader()
        for row in datos:
            # Filter the row dictionary to only include keys present in 'columnas'
            filtered_row = {k: v for k, v in row.items() if k in columnas}
            writer.writerow(filtered_row)


columnas_seccion1 = [
    'Archivo', 'Empresa', 'NIT', 'Póliza', 'Período',
    'Tipo ID', 'Número ID', 'Cotizante y Nombre', 'Estado de tr',
    'Fecha Inicio Cobertura', 'Fecha Fin Cobertura', 'Centro Trabajo',
    'Tasa de Cotizacion', 'Período de Mora', 'Diferencias Pendientes'
]

columnas_seccion2 = [
    'Archivo', 'Empresa', 'NIT', 'Póliza', 'Período',
    'Tipo Documento', 'Número Identificación', 'Cotizante y Nombre',
    'Tasa de Cotización', 'Valor Aporte'
]

columnas_seccion3 = [
    'Archivo', 'Empresa', 'NIT', 'Póliza', 'Período',
    'Tipo Documento', 'Número Identificación', 'Cotizante y Nombre',
    'Estado de tr', 'Fecha Inicio Cobertura',
    'Fecha Fin Cobertura', 'Centro Trabajo', 'Tasa BD', 'Tasa Pagada',
    'Período Mora', 'Valor Pagado', 'Diferencias Pendientes'
]

columnas_seccion4 = [
    'Archivo', 'Empresa', 'NIT', 'Póliza', 'Período',
    'Tipo ID', 'Número ID', 'Cotizante y Nombre',
    'Fecha Inicio Cobertura', 'Centro Trabajo', 'Tasa de Cotizacion'
]

# Guardar cada sección
guardar_txt(datos_trabajadores, '1. Afiliados_sin_pago.txt', columnas_seccion1)
guardar_txt(datos_trabajadores2, '2. No_afiliados_con_pago.txt', columnas_seccion2)
guardar_txt(datos_trabajadores3, '3. Diferencias_pago.txt', columnas_seccion3)
guardar_txt(datos_trabajadores4_1 + datos_trabajadores4_2, '4. Otras_diferencias.txt', columnas_seccion4)

# Descarga en Colab
files.download('1. Afiliados_sin_pago.txt')
files.download('2. No_afiliados_con_pago.txt')
files.download('3. Diferencias_pago.txt')
files.download('4. Otras_diferencias.txt')