# -*- coding: utf-8 -*-
"""planillasPila.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BG4-YxiFyvXm11Co_K2QsHteIm9nVY5h
"""

import pandas as pd
import numpy as np
from google.colab import files

def leer_tipo1_encabezado(linea):
    return {
        "NIT": linea[227:243].strip(),
        "Periodo de pago": linea[371:378].strip(),
        "Fecha de pago": linea[389:398].strip(),
        "Tipo Doc Aportante": linea[225:227].strip(),
        "Razon Social": linea[25:224].strip(),
        "Numero Planilla": linea[409:419].strip(),
        "Tipo de Planilla": linea[378:379].strip()
    }

def leer_tipo2_detalle(linea_completa, encabezado):
    nombre = " ".join([
        linea_completa[85:104].strip(),
        linea_completa[105:134].strip(),
        linea_completa[35:54].strip(),
        linea_completa[55:84].strip(),
    ]).strip()

    return {
        "Tipo de Planilla": encabezado.get("Tipo de Planilla"),
        "NIT": encabezado.get("NIT"),
        "Tipo Documento Aportante": encabezado.get("Tipo Doc Aportante"),
        "Razon Social": encabezado.get("Razon Social"),
        "Numero Planilla": encabezado.get("Numero Planilla"),
        "Departamento": linea_completa[31:32].strip(),
        "Municipio": linea_completa[34:35].strip(),
        "Periodo de pago": encabezado.get("Periodo de pago"),
        "Tipo de documento": linea_completa[6:8].strip(),
        "Número documento": linea_completa[8:23].strip(),
        "Nombre cotizante": nombre,
        "Fecha de pago": encabezado.get("Fecha de pago"),
        "Concepto de pago": "11 11. Traslado de aportes desde otra admin",
        "IBC": float(linea_completa[159:166]) if linea_completa[159:166].strip().isdigit() else 0,
        "ING": "X" if linea_completa[135] == "X" else "",
        "RET": "X" if linea_completa[136] == "X" else "",
        "VSP": "X" if linea_completa[137] == "X" else "",
        "VST": "X" if linea_completa[138] == "X" else "",
        "SLN": "X" if linea_completa[139] == "X" else "",
        "IGE": "X" if linea_completa[140] == "X" else "",
        "LMA": "X" if linea_completa[141] == "X" else "",
        "VAC-LR": "X" if linea_completa[142] == "X" else "",
        "Correcciones": linea_completa[203:204].strip(),
        "Exonerado L1607_2012": "",
        "Días cotizados": int(linea_completa[146:148]) if linea_completa[146:148].strip().isdigit() else 0,
        "Días de mora": "",
        "Valor pagado": int(linea_completa[183:191]) if linea_completa[183:192].strip().isdigit() else 0,
        "Valor UPC": "",
        "Valor interes": ""
    }

def procesar_txt(content):
    lines = content.splitlines()
    encabezado = None
    datos = []
    i = 0

    while i < len(lines):
        linea = lines[i]
        if linea.startswith("000001") and encabezado is None:
            encabezado = leer_tipo1_encabezado(linea)
        elif len(linea) >= 6 and linea[:5].isdigit() and linea[5] == "2":
            if i + 1 < len(lines):
                completo = lines[i] + lines[i + 1]
                if encabezado:
                    datos.append(leer_tipo2_detalle(completo, encabezado))
        i += 1

    return pd.DataFrame(datos)

def limpiar_valor(val):
    if pd.isnull(val):
        return 0
    if isinstance(val, (int, float)):
        return int(val)
    v = str(val).replace('.', '').replace(',', '').strip()
    return int(v) if v.isdigit() else 0

# Subir archivos TXT
uploaded = files.upload()

df_total = pd.DataFrame()
for filename, file in uploaded.items():
    content = file.decode("latin-1")
    df = procesar_txt(content)
    df_total = pd.concat([df_total, df], ignore_index=True)

# Procesamiento especial para planillas tipo N
df_tipoN = df_total[df_total["Tipo de Planilla"].str.upper().str.strip() == "N"].copy()
df_otros = df_total[df_total["Tipo de Planilla"].str.upper().str.strip() != "N"].copy()

if not df_tipoN.empty:
    cols_id = [
        'Tipo de Planilla', 'NIT', 'Tipo Documento Aportante', 'Razon Social',
        'Numero Planilla', 'Departamento', 'Municipio', 'Periodo de pago',
        'Tipo de documento', 'Número documento', 'Nombre cotizante', 'Fecha de pago'
    ]
    registros_finales = []
    for _, group in df_tipoN.groupby(cols_id, dropna=False):
        subtipos = set(group["Correcciones"])
        if "A" in subtipos and "C" in subtipos and len(group) >= 2:
            val_A = limpiar_valor(group[group["Correcciones"] == "A"]["Valor pagado"].iloc[0])
            val_C = limpiar_valor(group[group["Correcciones"] == "C"]["Valor pagado"].iloc[0])
            reg_C = group[group["Correcciones"] == "C"].iloc[0].copy()
            reg_C["Valor UPC"] = val_C - val_A
            registros_finales.append(reg_C)
        else:
            for _, row in group.iterrows():
                registros_finales.append(row)
    df_tipoN_final = pd.DataFrame(registros_finales)
else:
    df_tipoN_final = pd.DataFrame()

# Junta todo
df_final = pd.concat([df_otros, df_tipoN_final], ignore_index=True)

# --- SOLUCIÓN: Normaliza Valor UPC y columnas monetarias ---
if "Valor UPC" in df_final:
    df_final['Valor UPC'] = df_final['Valor UPC'].replace("", np.nan)
    df_final['Valor UPC'] = pd.to_numeric(df_final['Valor UPC'], errors='coerce')
    df_final['Valor UPC'] = df_final['Valor UPC'].apply(
        lambda x: '{:,.0f}'.format(x).replace(',', '.') if pd.notnull(x) else ""
    )

if "IBC" in df_final:
    df_final['IBC'] = pd.to_numeric(df_final['IBC'], errors='coerce')

# Formatea solo los valores no nulos
if not df_final.empty:
    if "IBC" in df_final:
        df_final['IBC'] = df_final['IBC'].apply(lambda x: '{:,.0f}'.format(x).replace(',', '.') if pd.notnull(x) else "")

# Guardar en Excel
with pd.ExcelWriter("Planillas_ARL.xlsx", engine="openpyxl") as writer:
    df_final.to_excel(writer, index=False, sheet_name="Planillas_ARL")

# Descargar Excel final
files.download("Planillas_ARL.xlsx")